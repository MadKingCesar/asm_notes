Registers are 16 bits in size but require 20 bits to get an address. To get a location in memory you need to put the address into two seperate registers.
One will contain the offset, and the other will contain the segment address (written segment:offset)

//General segments
CS        Code segment (Where code is read and written)
DS        Data segment (Where values are stored, VARS)
ES        Extra segment (Extra space)
SS        Stack segment (Temporary storage of data and addresses)

//General-purpose registers
AX   BX    CX     DX    SP             BP            SI              DI
ACC  BASE  COUNT  DATA  STACKPOINTER   BASEPOINTER   SOURCE INDEX    DESTINATION INDEX

//DOS services
09 H    ; Print string
4C H    ; Terminate dos service

AX, BX, CX, DX is split into 2 8bit registers (AH, AL & BH, BL and so on)

//Instructions
JMP     Jump to segment:address
INC     Increase
DEC     Decrease
MOV     Move bytes from one place to another (Usually between registers)
NEG     Multiply by (-1)
LEA     Load effective address (load offset address into register ex; LEA DX,OffsetStringVariable)
DUP     Duplicate whatever value comes after usually paired with a string or characters
INT     Interrupt which is used to call DOS services from the vector table
IRET    Interrupt return, returns to an address in code (usually after being ran from the dispatcher to continue the code)

//Ilegal instructions
MOV IMDATA (ex: 17), BX     Only the source operand may be immediate data
MOV SI, [SS]                Segment registers may not address memory data
MOV [SI], [BX]
MOV CS, SS
MOV BX, ES:[BX]

the brackets are known as memory data and it indicates that the "contents of memory" and not "contents of a register" is being addressed. 
Another way to do this is using a segment override prefix (example: MOV CS:[SI], AX    
move the contents of AX into a location at an offset (contained in SI) into the CS segment),  
if you don't specify CS:[SI] it would simply ASSUME that DS is the segment you want and would move the content into DS:SI. 
The segment override prefix is a single binary byte (26H).
Rather than taking the value inside BX it takes the offset of BX in memory, more or less as I understand it)

Only BP, BX, SI, and DI may hold an offset for memory data

r8 - 8bit register half
r16 - 16 bit register
sr - one of the four segment registers (CS, DS, SS, ES)
m8 - 8bit memory data
m16 - 16bit memory data
i16 - 16bit word of immediate data
d8 - 8bit displacement (where to jmp, signed or unsigned meaning positive or negative in memory)
d16 - 16bit displacement

OF - Overflow flag, result of operand too big to fit in the operand it org. occupied
DF - Direction flag, dictates the direction that activity moves (up or down in memory)
IF - Interrupt enable flag, is set by the CPU under certain conditions, can be set manually with CLI or STI instruction
TF - Trap flag, allows execution of one instruction before it calls interrupt routine.
SF - Sign flag, is set when the result of an operand forces the operand to become negative.
ZF - Zero flag, result of operation is 0.
AF - Auxiliary carry flag, not very important, BCD operations (binary coded decimal arithmetics)
PF - Parity flag, if the set number of bits (1's) in low-order byte result is odd or even. Even = 1, odd = 0)
CF - Carry flag, If the result of an arithmetic or shift operations "carries out" a bit from the operand, cf is set otherwise cleared.

BYTE PTR          ]
WORD PTR          ] Can be used with NEG to point at a location if type is specified ex) NEG BYTE PTR [BX]

DB - Define byte  ]
DW - Define word  ] Usually used with a variable ex)  MyWord   DW

//Definions and general knowledge

ASSUME is used to assume what segment is being used for data and code ex) ASSUME DS:DataSegment,CS:CodeSegment
"$" Ends the mark of a string
Define a segment using     DataSegment  SEGMENT, to end use DataSegment ENDS
To store your data segment in a place you first need to load it into a general purpose register, then into the data segment ex) MOV AX,DataSegment;MOV DS,AX

LIFO stack (Last in first out)
SS points to beginning of stack
SP points to end of stack
PUSHF push flag register
PUSH pushes a register. When you push a register SP gets decremented by one word to make space for the register (Copies the contents of the register to SP)
SP is decremented BEFORE pushing onto the stack, and AFTER removing a word from the stack (POP)
If the stack is empty the SP is just going to point to real data somewhere in memory
You can't push or pop BH or BL for example, it has to be a word.
All memory between SS:0 and SS:SP is considered free

DB 64 DUP ('EIGHTLET') defines 512 bytes for the stack, filled with the letters EIGHTLET in all places. DB works here because it can point to multi byte strings or buffers. Another example. DB 512 DUP (?) reserves 512 bytes of empty characters (space)

//The interrupt vector table 
Stars at segment 0 and goes up to 256
They are burned into permanent memory
Bytes 0-3 is considered vector 0, 4-7 vector 1, 8-11 vecotr 2 ; These have service routines during ex bios startup.

If you want to use DOS services u can load them into AH
When DOS calls the dispatcher it also pushes the next instruction to the stack as a means to get back

//Programs
Define as much space as you may need and space for interrupt services in the stack segment by using a buffert and a directive ex)
DW, DD, DB or DUP. The following are legal examples:
mByte DB 042h            HEX Not.
mDec DB 17               Decimal
mStr DB "A string","$"   String
mNum DB 0DH,0AH,'$'      Multiple numbers
Marked DB 10 DUP ('Eightnum')
Tablel DB 5 DUP (02H,04H,06H,08H)
Ex) NewBuff DB 1024 DUP (?)     Reserve 1024 bytes without character

Set up code segment, with a name;  label SEGMENT CODE
An ASSUME directive             ;  ASSUME CS:<name> DS:<name>
Main PROC and ENDP
Start: label                    ; Not the only option for label, but recommended
Load your data segment into DS  ; Use a subroutine of loading it into a general purpose register, then DS




LINKS:
https://en.wikipedia.org/wiki/X86_instruction_listings#Original_8086/8088_instructions - ALL 8086 / 8088 instructions
https://en.wikipedia.org/wiki/Interrupt_descriptor_table                               - Regarding interrupt descriptor table
https://en.wikipedia.org/wiki/Interrupt_vector_table                                   - Regarding interrupt vector table
